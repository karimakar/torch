# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FROnexmr0Gx9rEiMO0OlZX-A5EAvVXnq
"""

import torch

ten = torch.tensor([1,2,3])

ten

# multi
ten*ten

# matrix multiplication
torch.matmul(ten,ten)

# we can make the same operation with this symbol
ten @ ten

# Commented out IPython magic to ensure Python compatibility.
# %%time
# value = 0
# for i in range(len(ten)):
#   value+=ten[i] * ten[i]
#   value

# Commented out IPython magic to ensure Python compatibility.
# %%time
# torch.matmul(ten,ten)

# shape errors

tensor_a = torch.tensor([[1 ,2],
                         [3 , 4],
                         [5, 6]],dtype=torch.float32)
tensor_b =torch.tensor([[7 , 8],
                        [9 , 10],
                        [11 ,12]],dtype=torch.float32)

tensor_a

# check the shape and dimen of tensor_a
print(tensor_a.shape)
tensor_a.ndim

# check the shape and dimen of tensor_a
print(tensor_b.shape)
tensor_b.ndim

# matmul
torch.matmul(tensor_a,tensor_b)

print(tensor_a)
print(tensor_b)

print(tensor_a)
print(tensor_b.T)

torch.matmul(tensor_a,tensor_b.T)

print(f'the shape of tensor_a is:{tensor_a.shape},tensor_b={tensor_b.shape}\n')
print(f'the shape of tensor_a is the same:{tensor_a.shape} shape of tensor_b ater Transpose :{tensor_b.T.shape}\n')
print(f'Multiply:{tensor_a.shape} * {tensor_b.T.shape} <=inner dimension \n' )
print('output\n')
output = torch.matmul(tensor_a,tensor_b.T)
print(output)
print(f'output shape:{output.shape}')

# short funtion of matmul is mm
torch.mm(tensor_a,tensor_b.T)



"""# linear model
# y = x*At + b
"""

torch.manual_seed(42)
# this for matrix multip
linear = torch.nn.Linear(in_features=2,out_features=6,dtype=torch.float32)
x = tensor_a
output = linear(x)
print(f'shape of input:{x.shape}\n')
print(f'Output:{output}\n\n shape Output{output.shape}')

tensor_c = torch.tensor([[1,2,3],
                         [4,5,6],
                         [7,8,9]],dtype = torch.float32)

tensor_c.shape

torch.manual_seed(42)
# this for matrix multip
linear = torch.nn.Linear(in_features=3,out_features=8,dtype=torch.float32)
x = tensor_c
output = linear(x)
print(f'shape of input:{x.shape}\n')
print(f'Output:{output}\n\n shape Output{output.shape}')